#!/bin/bash
# Psycho-Noir Markdown Design System Pre-commit Hook
# Ensures all markdown files follow the design system standards

echo "üé≠ PSYCHO-NOIR MARKDOWN DESIGN SYSTEM"
echo "üîç Running pre-commit quality checks..."
echo

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if required tools are installed
check_tools() {
    local missing_tools=()

    if ! command -v markdownlint &> /dev/null; then
        missing_tools+=("markdownlint")
    fi

    if ! command -v prettier &> /dev/null; then
        missing_tools+=("prettier")
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Missing required tools: ${missing_tools[*]}${NC}"
        echo -e "${YELLOW}üí° Install with: npm install -g markdownlint-cli prettier${NC}"
        echo
        echo -e "${YELLOW}‚ö†Ô∏è  Skipping markdown quality checks${NC}"
        exit 0
    fi
}

# Find all markdown files to check
find_markdown_files() {
    find . -name "*.md" \
        -not -path "./node_modules/*" \
        -not -path "./.git/*" \
        -not -path "./dist/*" \
        -not -path "./build/*" \
        -type f
}

# Lint markdown files
lint_markdown() {
    local files=("$@")
    local lint_errors=0

    echo -e "${BLUE}üîç Linting markdown files...${NC}"

    for file in "${files[@]}"; do
        if markdownlint "$file" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $file${NC}"
        else
            echo -e "${RED}‚ùå $file${NC}"
            markdownlint "$file"
            ((lint_errors++))
        fi
    done

    return $lint_errors
}

# Format markdown files
format_markdown() {
    local files=("$@")

    echo -e "${BLUE}üé® Formatting markdown files...${NC}"

    for file in "${files[@]}"; do
        if prettier --write "$file" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Formatted: $file${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Could not format: $file${NC}"
        fi
    done
}

# Check for design system compliance
check_design_system() {
    local files=("$@")
    local design_issues=0

    echo -e "${BLUE}üé≠ Checking Psycho-Noir Design System compliance...${NC}"

    for file in "${files[@]}"; do
        local issues=0

        # Check for required header structure
        if ! head -5 "$file" | grep -q "^# üé≠"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Missing Psycho-Noir header in: $file${NC}"
            ((issues++))
        fi

        # Check for table of contents
        if ! grep -q "^## üìã INNHOLDSFORTEGNELSE" "$file" && [ $(wc -l < "$file") -gt 50 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Missing table of contents in: $file${NC}"
            ((issues++))
        fi

        # Check for proper emoji usage
        if ! grep -q "üé≠\|üîç\|‚ö°\|üìä\|üéØ" "$file"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Missing design system emojis in: $file${NC}"
            ((issues++))
        fi

        if [ $issues -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Design compliant: $file${NC}"
        fi

        ((design_issues += issues))
    done

    return $design_issues
}

# Main execution
main() {
    check_tools

    local markdown_files
    mapfile -t markdown_files < <(find_markdown_files)

    if [ ${#markdown_files[@]} -eq 0 ]; then
        echo -e "${GREEN}‚ÑπÔ∏è  No markdown files to check${NC}"
        exit 0
    fi

    echo -e "${BLUE}üìÅ Found ${#markdown_files[@]} markdown files${NC}"
    echo

    # Run checks
    local total_errors=0

    lint_markdown "${markdown_files[@]}"
    total_errors+=$?

    format_markdown "${markdown_files[@]}"

    check_design_system "${markdown_files[@]}"
    total_errors+=$?

    echo
    if [ $total_errors -gt 0 ]; then
        echo -e "${RED}‚ùå Found $total_errors issues${NC}"
        echo -e "${YELLOW}üí° Fix issues and try again, or use --no-verify to skip${NC}"
        echo
        echo -e "${BLUE}üîß Quick fixes:${NC}"
        echo -e "  ‚Ä¢ Run: npm run lint:fix"
        echo -e "  ‚Ä¢ Run: npm run format"
        echo -e "  ‚Ä¢ Check: .github/MARKDOWN_DESIGN_SYSTEM.md"
        echo
        exit 1
    else
        echo -e "${GREEN}‚úÖ All checks passed! üé≠${NC}"
        echo -e "${BLUE}üöÄ Ready for commit${NC}"
        exit 0
    fi
}

# Run main function
main "$@"
